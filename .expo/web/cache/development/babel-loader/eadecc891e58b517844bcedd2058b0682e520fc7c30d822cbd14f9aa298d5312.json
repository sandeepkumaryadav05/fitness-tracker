{"ast":null,"code":"import { getAssetByID } from '@react-native/assets-registry/registry';\nimport AssetSourceResolver from './AssetSourceResolver';\nlet _customSourceTransformer;\nexport function setCustomSourceTransformer(transformer) {\n  _customSourceTransformer = transformer;\n}\nfunction resolveAssetSource(source) {\n  if (typeof source === 'object') {\n    return source;\n  }\n  const asset = getAssetByID(source);\n  if (!asset) {\n    return null;\n  }\n  const resolver = new AssetSourceResolver('https://expo.dev', null, asset);\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get() {\n    return setCustomSourceTransformer;\n  }\n});\nexport default resolveAssetSource;\nexport const {\n  pickScale\n} = AssetSourceResolver;","map":{"version":3,"names":["getAssetByID","AssetSourceResolver","_customSourceTransformer","setCustomSourceTransformer","transformer","resolveAssetSource","source","asset","resolver","defaultAsset","Object","defineProperty","get","pickScale"],"sources":["C:\\Users\\Lenovo\\OneDrive\\Desktop\\fit-get\\fitness-tracker\\node_modules\\expo-asset\\src\\resolveAssetSource.ts"],"sourcesContent":["import { getAssetByID } from '@react-native/assets-registry/registry';\n\nimport AssetSourceResolver, { ResolvedAssetSource } from './AssetSourceResolver';\n\nlet _customSourceTransformer: (resolver: AssetSourceResolver) => ResolvedAssetSource;\n\nexport function setCustomSourceTransformer(\n  transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource\n): void {\n  _customSourceTransformer = transformer;\n}\n\ninterface resolveAssetSource {\n  (source: any): ResolvedAssetSource | null;\n  setCustomSourceTransformer(\n    transformer: (resolver: AssetSourceResolver) => ResolvedAssetSource\n  ): ResolvedAssetSource;\n}\n\n/**\n * `source` is either a number (opaque type returned by require('./foo.png'))\n * or an `ImageSource` like { uri: '<http location || file path>' }\n */\nfunction resolveAssetSource(source: any): ResolvedAssetSource | null {\n  if (typeof source === 'object') {\n    return source;\n  }\n\n  const asset = getAssetByID(source);\n  if (!asset) {\n    return null;\n  }\n\n  const resolver = new AssetSourceResolver(\n    // Doesn't matter since this is removed on web\n    'https://expo.dev',\n    null,\n    asset\n  );\n  if (_customSourceTransformer) {\n    return _customSourceTransformer(resolver);\n  }\n  return resolver.defaultAsset();\n}\n\nObject.defineProperty(resolveAssetSource, 'setCustomSourceTransformer', {\n  get() {\n    return setCustomSourceTransformer;\n  },\n});\n\nexport default resolveAssetSource as resolveAssetSource;\n\nexport const { pickScale } = AssetSourceResolver;\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,wCAAwC;AAErE,OAAOC,mBAA4C,MAAM,uBAAuB;AAEhF,IAAIC,wBAAgF;AAEpF,OAAM,SAAUC,0BAA0BA,CACxCC,WAAmE;EAEnEF,wBAAwB,GAAGE,WAAW;AACxC;AAaA,SAASC,kBAAkBA,CAACC,MAAW;EACrC,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;IAC9B,OAAOA,MAAM;EACf;EAEA,MAAMC,KAAK,GAAGP,YAAY,CAACM,MAAM,CAAC;EAClC,IAAI,CAACC,KAAK,EAAE;IACV,OAAO,IAAI;EACb;EAEA,MAAMC,QAAQ,GAAG,IAAIP,mBAAmB,CAEtC,kBAAkB,EAClB,IAAI,EACJM,KAAK,CACN;EACD,IAAIL,wBAAwB,EAAE;IAC5B,OAAOA,wBAAwB,CAACM,QAAQ,CAAC;EAC3C;EACA,OAAOA,QAAQ,CAACC,YAAY,EAAE;AAChC;AAEAC,MAAM,CAACC,cAAc,CAACN,kBAAkB,EAAE,4BAA4B,EAAE;EACtEO,GAAGA,CAAA;IACD,OAAOT,0BAA0B;EACnC;CACD,CAAC;AAEF,eAAeE,kBAAwC;AAEvD,OAAO,MAAM;EAAEQ;AAAS,CAAE,GAAGZ,mBAAmB","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}