{"ast":null,"code":"\"use strict\";\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"key\", \"routeNames\"];\nimport { CommonActions } from '@react-navigation/routers';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\nimport { checkDuplicateRouteNames } from \"./checkDuplicateRouteNames.js\";\nimport { checkSerializable } from \"./checkSerializable.js\";\nimport { NOT_INITIALIZED_ERROR } from \"./createNavigationContainerRef.js\";\nimport { DeprecatedNavigationInChildContext } from \"./DeprecatedNavigationInChildContext.js\";\nimport { EnsureSingleNavigator } from \"./EnsureSingleNavigator.js\";\nimport { findFocusedRoute } from \"./findFocusedRoute.js\";\nimport { NavigationBuilderContext } from \"./NavigationBuilderContext.js\";\nimport { NavigationContainerRefContext } from \"./NavigationContainerRefContext.js\";\nimport { NavigationIndependentTreeContext } from \"./NavigationIndependentTreeContext.js\";\nimport { NavigationStateContext } from \"./NavigationStateContext.js\";\nimport { ThemeProvider } from \"./theming/ThemeProvider.js\";\nimport { UnhandledActionContext } from \"./UnhandledActionContext.js\";\nimport { useChildListeners } from \"./useChildListeners.js\";\nimport { useEventEmitter } from \"./useEventEmitter.js\";\nimport { useKeyedChildListeners } from \"./useKeyedChildListeners.js\";\nimport { useNavigationIndependentTree } from \"./useNavigationIndependentTree.js\";\nimport { useOptionsGetters } from \"./useOptionsGetters.js\";\nimport { useSyncState } from \"./useSyncState.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst serializableWarnings = [];\nconst duplicateNameWarnings = [];\nconst getPartialState = state => {\n  if (state === undefined) {\n    return;\n  }\n  const partialState = _objectWithoutPropertiesLoose(state, _excluded);\n  return Object.assign({}, partialState, {\n    stale: true,\n    routes: state.routes.map(route => {\n      if (route.state === undefined) {\n        return route;\n      }\n      return Object.assign({}, route, {\n        state: getPartialState(route.state)\n      });\n    })\n  });\n};\nexport const BaseNavigationContainer = React.forwardRef(function BaseNavigationContainer({\n  initialState,\n  onStateChange,\n  onReady,\n  onUnhandledAction,\n  navigationInChildEnabled = false,\n  theme,\n  children\n}, ref) {\n  const parent = React.useContext(NavigationStateContext);\n  const independent = useNavigationIndependentTree();\n  if (!parent.isDefault && !independent) {\n    throw new Error(\"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, wrap the container in 'NavigationIndependentTree' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\");\n  }\n  const {\n    state,\n    getState,\n    setState,\n    scheduleUpdate,\n    flushUpdates\n  } = useSyncState(() => getPartialState(initialState == null ? undefined : initialState));\n  const isFirstMountRef = React.useRef(true);\n  const navigatorKeyRef = React.useRef(undefined);\n  const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n  const setKey = React.useCallback(key => {\n    navigatorKeyRef.current = key;\n  }, []);\n  const {\n    listeners,\n    addListener\n  } = useChildListeners();\n  const {\n    keyedListeners,\n    addKeyedListener\n  } = useKeyedChildListeners();\n  const dispatch = useLatestCallback(action => {\n    if (listeners.focus[0] == null) {\n      console.error(NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](navigation => navigation.dispatch(action));\n    }\n  });\n  const canGoBack = useLatestCallback(() => {\n    if (listeners.focus[0] == null) {\n      return false;\n    }\n    const {\n      result,\n      handled\n    } = listeners.focus[0](navigation => navigation.canGoBack());\n    if (handled) {\n      return result;\n    } else {\n      return false;\n    }\n  });\n  const resetRoot = useLatestCallback(state => {\n    const target = state?.key ?? keyedListeners.getState.root?.().key;\n    if (target == null) {\n      console.error(NOT_INITIALIZED_ERROR);\n    } else {\n      listeners.focus[0](navigation => navigation.dispatch(Object.assign({}, CommonActions.reset(state), {\n        target\n      })));\n    }\n  });\n  const getRootState = useLatestCallback(() => {\n    return keyedListeners.getState.root?.();\n  });\n  const getCurrentRoute = useLatestCallback(() => {\n    const state = getRootState();\n    if (state == null) {\n      return undefined;\n    }\n    const route = findFocusedRoute(state);\n    return route;\n  });\n  const isReady = useLatestCallback(() => listeners.focus[0] != null);\n  const emitter = useEventEmitter();\n  const {\n    addOptionsGetter,\n    getCurrentOptions\n  } = useOptionsGetters({});\n  const navigation = React.useMemo(() => Object.assign({}, Object.keys(CommonActions).reduce((acc, name) => {\n    acc[name] = (...args) => dispatch(CommonActions[name](...args));\n    return acc;\n  }, {}), emitter.create('root'), {\n    dispatch,\n    resetRoot,\n    isFocused: () => true,\n    canGoBack,\n    getParent: () => undefined,\n    getState,\n    getRootState,\n    getCurrentRoute,\n    getCurrentOptions,\n    isReady,\n    setOptions: () => {\n      throw new Error('Cannot call setOptions outside a screen');\n    }\n  }), [canGoBack, dispatch, emitter, getCurrentOptions, getCurrentRoute, getRootState, getState, isReady, resetRoot]);\n  React.useImperativeHandle(ref, () => navigation, [navigation]);\n  const onDispatchAction = useLatestCallback((action, noop) => {\n    emitter.emit({\n      type: '__unsafe_action__',\n      data: {\n        action,\n        noop,\n        stack: stackRef.current\n      }\n    });\n  });\n  const lastEmittedOptionsRef = React.useRef(undefined);\n  const onOptionsChange = useLatestCallback(options => {\n    if (lastEmittedOptionsRef.current === options) {\n      return;\n    }\n    lastEmittedOptionsRef.current = options;\n    emitter.emit({\n      type: 'options',\n      data: {\n        options\n      }\n    });\n  });\n  const stackRef = React.useRef(undefined);\n  const builderContext = React.useMemo(() => ({\n    addListener,\n    addKeyedListener,\n    onDispatchAction,\n    onOptionsChange,\n    scheduleUpdate,\n    flushUpdates,\n    stackRef\n  }), [addListener, addKeyedListener, onDispatchAction, onOptionsChange, scheduleUpdate, flushUpdates]);\n  const isInitialRef = React.useRef(true);\n  const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n  const context = React.useMemo(() => ({\n    state,\n    getState,\n    setState,\n    getKey,\n    setKey,\n    getIsInitial,\n    addOptionsGetter\n  }), [state, getState, setState, getKey, setKey, getIsInitial, addOptionsGetter]);\n  const onReadyRef = React.useRef(onReady);\n  const onStateChangeRef = React.useRef(onStateChange);\n  React.useEffect(() => {\n    isInitialRef.current = false;\n    onStateChangeRef.current = onStateChange;\n    onReadyRef.current = onReady;\n  });\n  const onReadyCalledRef = React.useRef(false);\n  React.useEffect(() => {\n    if (!onReadyCalledRef.current && isReady()) {\n      onReadyCalledRef.current = true;\n      onReadyRef.current?.();\n      emitter.emit({\n        type: 'ready'\n      });\n    }\n  }, [state, isReady, emitter]);\n  React.useEffect(() => {\n    const hydratedState = getRootState();\n    if (process.env.NODE_ENV !== 'production') {\n      if (hydratedState !== undefined) {\n        const serializableResult = checkSerializable(hydratedState);\n        if (!serializableResult.serializable) {\n          const {\n            location,\n            reason\n          } = serializableResult;\n          let path = '';\n          let pointer = hydratedState;\n          let params = false;\n          for (let i = 0; i < location.length; i++) {\n            const curr = location[i];\n            const prev = location[i - 1];\n            pointer = pointer[curr];\n            if (!params && curr === 'state') {\n              continue;\n            } else if (!params && curr === 'routes') {\n              if (path) {\n                path += ' > ';\n              }\n            } else if (!params && typeof curr === 'number' && prev === 'routes') {\n              path += pointer?.name;\n            } else if (!params) {\n              path += ` > ${curr}`;\n              params = true;\n            } else {\n              if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                path += `[${curr}]`;\n              } else if (/^[a-z$_]+$/i.test(curr)) {\n                path += `.${curr}`;\n              } else {\n                path += `[${JSON.stringify(curr)}]`;\n              }\n            }\n          }\n          const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n          if (!serializableWarnings.includes(message)) {\n            serializableWarnings.push(message);\n            console.warn(message);\n          }\n        }\n        const duplicateRouteNamesResult = checkDuplicateRouteNames(hydratedState);\n        if (duplicateRouteNamesResult.length) {\n          const message = `Found screens with the same name nested inside one another. Check:\\n${duplicateRouteNamesResult.map(locations => `\\n${locations.join(', ')}`)}\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;\n          if (!duplicateNameWarnings.includes(message)) {\n            duplicateNameWarnings.push(message);\n            console.warn(message);\n          }\n        }\n      }\n    }\n    emitter.emit({\n      type: 'state',\n      data: {\n        state\n      }\n    });\n    if (!isFirstMountRef.current && onStateChangeRef.current) {\n      onStateChangeRef.current(hydratedState);\n    }\n    isFirstMountRef.current = false;\n  }, [getRootState, emitter, state]);\n  const defaultOnUnhandledAction = useLatestCallback(action => {\n    if (process.env.NODE_ENV === 'production') {\n      return;\n    }\n    const payload = action.payload;\n    let message = `The action '${action.type}'${payload ? ` with payload ${JSON.stringify(action.payload)}` : ''} was not handled by any navigator.`;\n    switch (action.type) {\n      case 'PRELOAD':\n      case 'NAVIGATE':\n      case 'PUSH':\n      case 'REPLACE':\n      case 'POP_TO':\n      case 'JUMP_TO':\n        if (payload?.name) {\n          message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.\\n\\nIf you're using conditional rendering, navigation will happen automatically and you shouldn't navigate manually, see.`;\n        } else {\n          message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n        }\n        break;\n      case 'GO_BACK':\n      case 'POP':\n      case 'POP_TO_TOP':\n        message += `\\n\\nIs there any screen to go back to?`;\n        break;\n      case 'OPEN_DRAWER':\n      case 'CLOSE_DRAWER':\n      case 'TOGGLE_DRAWER':\n        message += `\\n\\nIs your screen inside a Drawer navigator?`;\n        break;\n    }\n    message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n    console.error(message);\n  });\n  return _jsx(NavigationIndependentTreeContext.Provider, {\n    value: false,\n    children: _jsx(NavigationContainerRefContext.Provider, {\n      value: navigation,\n      children: _jsx(NavigationBuilderContext.Provider, {\n        value: builderContext,\n        children: _jsx(NavigationStateContext.Provider, {\n          value: context,\n          children: _jsx(UnhandledActionContext.Provider, {\n            value: onUnhandledAction ?? defaultOnUnhandledAction,\n            children: _jsx(DeprecatedNavigationInChildContext.Provider, {\n              value: navigationInChildEnabled,\n              children: _jsx(EnsureSingleNavigator, {\n                children: _jsx(ThemeProvider, {\n                  value: theme,\n                  children: children\n                })\n              })\n            })\n          })\n        })\n      })\n    })\n  });\n});","map":{"version":3,"names":["CommonActions","React","useLatestCallback","checkDuplicateRouteNames","checkSerializable","NOT_INITIALIZED_ERROR","DeprecatedNavigationInChildContext","EnsureSingleNavigator","findFocusedRoute","NavigationBuilderContext","NavigationContainerRefContext","NavigationIndependentTreeContext","NavigationStateContext","ThemeProvider","UnhandledActionContext","useChildListeners","useEventEmitter","useKeyedChildListeners","useNavigationIndependentTree","useOptionsGetters","useSyncState","jsx","_jsx","serializableWarnings","duplicateNameWarnings","getPartialState","state","undefined","partialState","_objectWithoutPropertiesLoose","_excluded","Object","assign","stale","routes","map","route","BaseNavigationContainer","forwardRef","initialState","onStateChange","onReady","onUnhandledAction","navigationInChildEnabled","theme","children","ref","parent","useContext","independent","isDefault","Error","getState","setState","scheduleUpdate","flushUpdates","isFirstMountRef","useRef","navigatorKeyRef","getKey","useCallback","current","setKey","key","listeners","addListener","keyedListeners","addKeyedListener","dispatch","action","focus","console","error","navigation","canGoBack","result","handled","resetRoot","target","root","reset","getRootState","getCurrentRoute","isReady","emitter","addOptionsGetter","getCurrentOptions","useMemo","keys","reduce","acc","name","args","create","isFocused","getParent","setOptions","useImperativeHandle","onDispatchAction","noop","emit","type","data","stack","stackRef","lastEmittedOptionsRef","onOptionsChange","options","builderContext","isInitialRef","getIsInitial","context","onReadyRef","onStateChangeRef","useEffect","onReadyCalledRef","hydratedState","process","env","NODE_ENV","serializableResult","serializable","location","reason","path","pointer","params","i","length","curr","prev","test","JSON","stringify","message","includes","push","warn","duplicateRouteNamesResult","locations","join","defaultOnUnhandledAction","payload","Provider","value"],"sources":["C:\\Users\\Lenovo\\OneDrive\\Desktop\\fit-get\\fitness-tracker\\node_modules\\@react-navigation\\core\\src\\BaseNavigationContainer.tsx"],"sourcesContent":["import {\n  CommonActions,\n  type InitialState,\n  type NavigationAction,\n  type NavigationState,\n  type ParamListBase,\n  type PartialState,\n  type Route,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\n\nimport { checkDuplicateRouteNames } from './checkDuplicateRouteNames';\nimport { checkSerializable } from './checkSerializable';\nimport { NOT_INITIALIZED_ERROR } from './createNavigationContainerRef';\nimport { DeprecatedNavigationInChildContext } from './DeprecatedNavigationInChildContext';\nimport { EnsureSingleNavigator } from './EnsureSingleNavigator';\nimport { findFocusedRoute } from './findFocusedRoute';\nimport { NavigationBuilderContext } from './NavigationBuilderContext';\nimport { NavigationContainerRefContext } from './NavigationContainerRefContext';\nimport { NavigationIndependentTreeContext } from './NavigationIndependentTreeContext';\nimport { NavigationStateContext } from './NavigationStateContext';\nimport { ThemeProvider } from './theming/ThemeProvider';\nimport type {\n  NavigationContainerEventMap,\n  NavigationContainerProps,\n  NavigationContainerRef,\n} from './types';\nimport { UnhandledActionContext } from './UnhandledActionContext';\nimport { useChildListeners } from './useChildListeners';\nimport { useEventEmitter } from './useEventEmitter';\nimport { useKeyedChildListeners } from './useKeyedChildListeners';\nimport { useNavigationIndependentTree } from './useNavigationIndependentTree';\nimport { useOptionsGetters } from './useOptionsGetters';\nimport { useSyncState } from './useSyncState';\n\ntype State = NavigationState | PartialState<NavigationState> | undefined;\n\nconst serializableWarnings: string[] = [];\nconst duplicateNameWarnings: string[] = [];\n\n/**\n * Remove `key` and `routeNames` from the state objects recursively to get partial state.\n *\n * @param state Initial state object.\n */\nconst getPartialState = (\n  state: InitialState | undefined\n): PartialState<NavigationState> | undefined => {\n  if (state === undefined) {\n    return;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  const { key, routeNames, ...partialState } = state;\n\n  return {\n    ...partialState,\n    stale: true,\n    routes: state.routes.map((route) => {\n      if (route.state === undefined) {\n        return route as Route<string> & {\n          state?: PartialState<NavigationState>;\n        };\n      }\n\n      return { ...route, state: getPartialState(route.state) };\n    }),\n  };\n};\n\n/**\n * Container component which holds the navigation state.\n * This should be rendered at the root wrapping the whole app.\n *\n * @param props.initialState Initial state object for the navigation tree.\n * @param props.onReady Callback which is called after the navigation tree mounts.\n * @param props.onStateChange Callback which is called with the latest navigation state when it changes.\n * @param props.onUnhandledAction Callback which is called when an action is not handled.\n * @param props.theme Theme object for the UI elements.\n * @param props.children Child elements to render the content.\n * @param props.ref Ref object which refers to the navigation object containing helper methods.\n */\nexport const BaseNavigationContainer = React.forwardRef(\n  function BaseNavigationContainer(\n    {\n      initialState,\n      onStateChange,\n      onReady,\n      onUnhandledAction,\n      navigationInChildEnabled = false,\n      theme,\n      children,\n    }: NavigationContainerProps,\n    ref?: React.Ref<NavigationContainerRef<ParamListBase>>\n  ) {\n    const parent = React.useContext(NavigationStateContext);\n    const independent = useNavigationIndependentTree();\n\n    if (!parent.isDefault && !independent) {\n      throw new Error(\n        \"Looks like you have nested a 'NavigationContainer' inside another. Normally you need only one container at the root of the app, so this was probably an error. If this was intentional, wrap the container in 'NavigationIndependentTree' explicitly. Note that this will make the child navigators disconnected from the parent and you won't be able to navigate between them.\"\n      );\n    }\n\n    const { state, getState, setState, scheduleUpdate, flushUpdates } =\n      useSyncState<State>(() =>\n        getPartialState(initialState == null ? undefined : initialState)\n      );\n\n    const isFirstMountRef = React.useRef<boolean>(true);\n\n    const navigatorKeyRef = React.useRef<string | undefined>(undefined);\n\n    const getKey = React.useCallback(() => navigatorKeyRef.current, []);\n\n    const setKey = React.useCallback((key: string) => {\n      navigatorKeyRef.current = key;\n    }, []);\n\n    const { listeners, addListener } = useChildListeners();\n\n    const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n    const dispatch = useLatestCallback(\n      (\n        action:\n          | NavigationAction\n          | ((state: NavigationState) => NavigationAction)\n      ) => {\n        if (listeners.focus[0] == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) => navigation.dispatch(action));\n        }\n      }\n    );\n\n    const canGoBack = useLatestCallback(() => {\n      if (listeners.focus[0] == null) {\n        return false;\n      }\n\n      const { result, handled } = listeners.focus[0]((navigation) =>\n        navigation.canGoBack()\n      );\n\n      if (handled) {\n        return result;\n      } else {\n        return false;\n      }\n    });\n\n    const resetRoot = useLatestCallback(\n      (state?: PartialState<NavigationState> | NavigationState) => {\n        const target = state?.key ?? keyedListeners.getState.root?.().key;\n\n        if (target == null) {\n          console.error(NOT_INITIALIZED_ERROR);\n        } else {\n          listeners.focus[0]((navigation) =>\n            navigation.dispatch({\n              ...CommonActions.reset(state),\n              target,\n            })\n          );\n        }\n      }\n    );\n\n    const getRootState = useLatestCallback(() => {\n      return keyedListeners.getState.root?.();\n    });\n\n    const getCurrentRoute = useLatestCallback(() => {\n      const state = getRootState();\n\n      if (state == null) {\n        return undefined;\n      }\n\n      const route = findFocusedRoute(state);\n\n      return route as Route<string> | undefined;\n    });\n\n    const isReady = useLatestCallback(() => listeners.focus[0] != null);\n\n    const emitter = useEventEmitter<NavigationContainerEventMap>();\n\n    const { addOptionsGetter, getCurrentOptions } = useOptionsGetters({});\n\n    const navigation: NavigationContainerRef<ParamListBase> = React.useMemo(\n      () => ({\n        ...Object.keys(CommonActions).reduce<any>((acc, name) => {\n          acc[name] = (...args: any[]) =>\n            // @ts-expect-error: this is ok\n            dispatch(CommonActions[name](...args));\n          return acc;\n        }, {}),\n        ...emitter.create('root'),\n        dispatch,\n        resetRoot,\n        isFocused: () => true,\n        canGoBack,\n        getParent: () => undefined,\n        getState,\n        getRootState,\n        getCurrentRoute,\n        getCurrentOptions,\n        isReady,\n        setOptions: () => {\n          throw new Error('Cannot call setOptions outside a screen');\n        },\n      }),\n      [\n        canGoBack,\n        dispatch,\n        emitter,\n        getCurrentOptions,\n        getCurrentRoute,\n        getRootState,\n        getState,\n        isReady,\n        resetRoot,\n      ]\n    );\n\n    React.useImperativeHandle(ref, () => navigation, [navigation]);\n\n    const onDispatchAction = useLatestCallback(\n      (action: NavigationAction, noop: boolean) => {\n        emitter.emit({\n          type: '__unsafe_action__',\n          data: { action, noop, stack: stackRef.current },\n        });\n      }\n    );\n\n    const lastEmittedOptionsRef = React.useRef<object | undefined>(undefined);\n\n    const onOptionsChange = useLatestCallback((options: object) => {\n      if (lastEmittedOptionsRef.current === options) {\n        return;\n      }\n\n      lastEmittedOptionsRef.current = options;\n\n      emitter.emit({\n        type: 'options',\n        data: { options },\n      });\n    });\n\n    const stackRef = React.useRef<string | undefined>(undefined);\n\n    const builderContext = React.useMemo(\n      () => ({\n        addListener,\n        addKeyedListener,\n        onDispatchAction,\n        onOptionsChange,\n        scheduleUpdate,\n        flushUpdates,\n        stackRef,\n      }),\n      [\n        addListener,\n        addKeyedListener,\n        onDispatchAction,\n        onOptionsChange,\n        scheduleUpdate,\n        flushUpdates,\n      ]\n    );\n\n    const isInitialRef = React.useRef(true);\n\n    const getIsInitial = React.useCallback(() => isInitialRef.current, []);\n\n    const context = React.useMemo(\n      () => ({\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      }),\n      [\n        state,\n        getState,\n        setState,\n        getKey,\n        setKey,\n        getIsInitial,\n        addOptionsGetter,\n      ]\n    );\n\n    const onReadyRef = React.useRef(onReady);\n    const onStateChangeRef = React.useRef(onStateChange);\n\n    React.useEffect(() => {\n      isInitialRef.current = false;\n      onStateChangeRef.current = onStateChange;\n      onReadyRef.current = onReady;\n    });\n\n    const onReadyCalledRef = React.useRef(false);\n\n    React.useEffect(() => {\n      if (!onReadyCalledRef.current && isReady()) {\n        onReadyCalledRef.current = true;\n        onReadyRef.current?.();\n        emitter.emit({ type: 'ready' });\n      }\n    }, [state, isReady, emitter]);\n\n    React.useEffect(() => {\n      const hydratedState = getRootState();\n\n      if (process.env.NODE_ENV !== 'production') {\n        if (hydratedState !== undefined) {\n          const serializableResult = checkSerializable(hydratedState);\n\n          if (!serializableResult.serializable) {\n            const { location, reason } = serializableResult;\n\n            let path = '';\n            let pointer: Record<any, any> = hydratedState;\n            let params = false;\n\n            for (let i = 0; i < location.length; i++) {\n              const curr = location[i];\n              const prev = location[i - 1];\n\n              pointer = pointer[curr];\n\n              if (!params && curr === 'state') {\n                continue;\n              } else if (!params && curr === 'routes') {\n                if (path) {\n                  path += ' > ';\n                }\n              } else if (\n                !params &&\n                typeof curr === 'number' &&\n                prev === 'routes'\n              ) {\n                path += pointer?.name;\n              } else if (!params) {\n                path += ` > ${curr}`;\n                params = true;\n              } else {\n                if (typeof curr === 'number' || /^[0-9]+$/.test(curr)) {\n                  path += `[${curr}]`;\n                } else if (/^[a-z$_]+$/i.test(curr)) {\n                  path += `.${curr}`;\n                } else {\n                  path += `[${JSON.stringify(curr)}]`;\n                }\n              }\n            }\n\n            const message = `Non-serializable values were found in the navigation state. Check:\\n\\n${path} (${reason})\\n\\nThis can break usage such as persisting and restoring state. This might happen if you passed non-serializable values such as function, class instances etc. in params. If you need to use components with callbacks in your options, you can use 'navigation.setOptions' instead. See https://reactnavigation.org/docs/troubleshooting#i-get-the-warning-non-serializable-values-were-found-in-the-navigation-state for more details.`;\n\n            if (!serializableWarnings.includes(message)) {\n              serializableWarnings.push(message);\n              console.warn(message);\n            }\n          }\n\n          const duplicateRouteNamesResult =\n            checkDuplicateRouteNames(hydratedState);\n\n          if (duplicateRouteNamesResult.length) {\n            const message = `Found screens with the same name nested inside one another. Check:\\n${duplicateRouteNamesResult.map(\n              (locations) => `\\n${locations.join(', ')}`\n            )}\\n\\nThis can cause confusing behavior during navigation. Consider using unique names for each screen instead.`;\n\n            if (!duplicateNameWarnings.includes(message)) {\n              duplicateNameWarnings.push(message);\n              console.warn(message);\n            }\n          }\n        }\n      }\n\n      emitter.emit({ type: 'state', data: { state } });\n\n      if (!isFirstMountRef.current && onStateChangeRef.current) {\n        onStateChangeRef.current(hydratedState);\n      }\n\n      isFirstMountRef.current = false;\n    }, [getRootState, emitter, state]);\n\n    const defaultOnUnhandledAction = useLatestCallback(\n      (action: NavigationAction) => {\n        if (process.env.NODE_ENV === 'production') {\n          return;\n        }\n\n        const payload: Record<string, any> | undefined = action.payload;\n\n        let message = `The action '${action.type}'${\n          payload ? ` with payload ${JSON.stringify(action.payload)}` : ''\n        } was not handled by any navigator.`;\n\n        switch (action.type) {\n          case 'PRELOAD':\n          case 'NAVIGATE':\n          case 'PUSH':\n          case 'REPLACE':\n          case 'POP_TO':\n          case 'JUMP_TO':\n            if (payload?.name) {\n              message += `\\n\\nDo you have a screen named '${payload.name}'?\\n\\nIf you're trying to navigate to a screen in a nested navigator, see https://reactnavigation.org/docs/nesting-navigators#navigating-to-a-screen-in-a-nested-navigator.\\n\\nIf you're using conditional rendering, navigation will happen automatically and you shouldn't navigate manually, see.`;\n            } else {\n              message += `\\n\\nYou need to pass the name of the screen to navigate to.\\n\\nSee https://reactnavigation.org/docs/navigation-actions for usage.`;\n            }\n\n            break;\n          case 'GO_BACK':\n          case 'POP':\n          case 'POP_TO_TOP':\n            message += `\\n\\nIs there any screen to go back to?`;\n            break;\n          case 'OPEN_DRAWER':\n          case 'CLOSE_DRAWER':\n          case 'TOGGLE_DRAWER':\n            message += `\\n\\nIs your screen inside a Drawer navigator?`;\n            break;\n        }\n\n        message += `\\n\\nThis is a development-only warning and won't be shown in production.`;\n\n        console.error(message);\n      }\n    );\n\n    return (\n      <NavigationIndependentTreeContext.Provider value={false}>\n        <NavigationContainerRefContext.Provider value={navigation}>\n          <NavigationBuilderContext.Provider value={builderContext}>\n            <NavigationStateContext.Provider value={context}>\n              <UnhandledActionContext.Provider\n                value={onUnhandledAction ?? defaultOnUnhandledAction}\n              >\n                <DeprecatedNavigationInChildContext.Provider\n                  value={navigationInChildEnabled}\n                >\n                  <EnsureSingleNavigator>\n                    <ThemeProvider value={theme}>{children}</ThemeProvider>\n                  </EnsureSingleNavigator>\n                </DeprecatedNavigationInChildContext.Provider>\n              </UnhandledActionContext.Provider>\n            </NavigationStateContext.Provider>\n          </NavigationBuilderContext.Provider>\n        </NavigationContainerRefContext.Provider>\n      </NavigationIndependentTreeContext.Provider>\n    );\n  }\n);\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}