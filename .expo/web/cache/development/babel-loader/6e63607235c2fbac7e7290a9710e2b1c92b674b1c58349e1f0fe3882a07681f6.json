{"ast":null,"code":"\"use strict\";\n\nimport { CommonActions, DrawerActions, useLinkBuilder } from '@react-navigation/native';\nimport * as React from 'react';\nimport { DrawerItem } from \"./DrawerItem.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function DrawerItemList({\n  state,\n  navigation,\n  descriptors\n}) {\n  const {\n    buildHref\n  } = useLinkBuilder();\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n  const {\n    drawerActiveTintColor,\n    drawerInactiveTintColor,\n    drawerActiveBackgroundColor,\n    drawerInactiveBackgroundColor\n  } = focusedOptions;\n  return state.routes.map((route, i) => {\n    const focused = i === state.index;\n    const onPress = () => {\n      const event = navigation.emit({\n        type: 'drawerItemPress',\n        target: route.key,\n        canPreventDefault: true\n      });\n      if (!event.defaultPrevented) {\n        navigation.dispatch(Object.assign({}, focused ? DrawerActions.closeDrawer() : CommonActions.navigate(route), {\n          target: state.key\n        }));\n      }\n    };\n    const {\n      title,\n      drawerLabel,\n      drawerIcon,\n      drawerLabelStyle,\n      drawerItemStyle,\n      drawerAllowFontScaling\n    } = descriptors[route.key].options;\n    return _jsx(DrawerItem, {\n      route: route,\n      href: buildHref(route.name, route.params),\n      label: drawerLabel !== undefined ? drawerLabel : title !== undefined ? title : route.name,\n      icon: drawerIcon,\n      focused: focused,\n      activeTintColor: drawerActiveTintColor,\n      inactiveTintColor: drawerInactiveTintColor,\n      activeBackgroundColor: drawerActiveBackgroundColor,\n      inactiveBackgroundColor: drawerInactiveBackgroundColor,\n      allowFontScaling: drawerAllowFontScaling,\n      labelStyle: drawerLabelStyle,\n      style: drawerItemStyle,\n      onPress: onPress\n    }, route.key);\n  });\n}","map":{"version":3,"names":["CommonActions","DrawerActions","useLinkBuilder","React","DrawerItem","jsx","_jsx","DrawerItemList","state","navigation","descriptors","buildHref","focusedRoute","routes","index","focusedDescriptor","key","focusedOptions","options","drawerActiveTintColor","drawerInactiveTintColor","drawerActiveBackgroundColor","drawerInactiveBackgroundColor","map","route","i","focused","onPress","event","emit","type","target","canPreventDefault","defaultPrevented","dispatch","Object","assign","closeDrawer","navigate","title","drawerLabel","drawerIcon","drawerLabelStyle","drawerItemStyle","drawerAllowFontScaling","href","name","params","label","undefined","icon","activeTintColor","inactiveTintColor","activeBackgroundColor","inactiveBackgroundColor","allowFontScaling","labelStyle","style"],"sources":["C:\\Users\\Lenovo\\OneDrive\\Desktop\\fit-get\\fitness-tracker\\node_modules\\@react-navigation\\drawer\\src\\views\\DrawerItemList.tsx"],"sourcesContent":["import {\n  CommonActions,\n  DrawerActions,\n  type DrawerNavigationState,\n  type ParamListBase,\n  useLinkBuilder,\n} from '@react-navigation/native';\nimport * as React from 'react';\n\nimport type { DrawerDescriptorMap, DrawerNavigationHelpers } from '../types';\nimport { DrawerItem } from './DrawerItem';\n\ntype Props = {\n  state: DrawerNavigationState<ParamListBase>;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\n/**\n * Component that renders the navigation list in the drawer.\n */\nexport function DrawerItemList({ state, navigation, descriptors }: Props) {\n  const { buildHref } = useLinkBuilder();\n\n  const focusedRoute = state.routes[state.index];\n  const focusedDescriptor = descriptors[focusedRoute.key];\n  const focusedOptions = focusedDescriptor.options;\n\n  const {\n    drawerActiveTintColor,\n    drawerInactiveTintColor,\n    drawerActiveBackgroundColor,\n    drawerInactiveBackgroundColor,\n  } = focusedOptions;\n\n  return state.routes.map((route, i) => {\n    const focused = i === state.index;\n\n    const onPress = () => {\n      const event = navigation.emit({\n        type: 'drawerItemPress',\n        target: route.key,\n        canPreventDefault: true,\n      });\n\n      if (!event.defaultPrevented) {\n        navigation.dispatch({\n          ...(focused\n            ? DrawerActions.closeDrawer()\n            : CommonActions.navigate(route)),\n          target: state.key,\n        });\n      }\n    };\n\n    const {\n      title,\n      drawerLabel,\n      drawerIcon,\n      drawerLabelStyle,\n      drawerItemStyle,\n      drawerAllowFontScaling,\n    } = descriptors[route.key].options;\n\n    return (\n      <DrawerItem\n        key={route.key}\n        route={route}\n        href={buildHref(route.name, route.params)}\n        label={\n          drawerLabel !== undefined\n            ? drawerLabel\n            : title !== undefined\n              ? title\n              : route.name\n        }\n        icon={drawerIcon}\n        focused={focused}\n        activeTintColor={drawerActiveTintColor}\n        inactiveTintColor={drawerInactiveTintColor}\n        activeBackgroundColor={drawerActiveBackgroundColor}\n        inactiveBackgroundColor={drawerInactiveBackgroundColor}\n        allowFontScaling={drawerAllowFontScaling}\n        labelStyle={drawerLabelStyle}\n        style={drawerItemStyle}\n        onPress={onPress}\n      />\n    );\n  }) as React.ReactNode as React.ReactElement;\n}\n"],"mappings":";;AAAA,SACEA,aAAa,EACbC,aAAa,EAGbC,cAAc,QACT,0BAA0B;AACjC,OAAO,KAAKC,KAAK,MAAM,OAAO;AAG9B,SAASC,UAAU,QAAQ,iBAAc;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAW1C,OAAO,SAASC,cAAcA,CAAC;EAAEC,KAAK;EAAEC,UAAU;EAAEC;AAAmB,CAAC,EAAE;EACxE,MAAM;IAAEC;EAAU,CAAC,GAAGT,cAAc,CAAC,CAAC;EAEtC,MAAMU,YAAY,GAAGJ,KAAK,CAACK,MAAM,CAACL,KAAK,CAACM,KAAK,CAAC;EAC9C,MAAMC,iBAAiB,GAAGL,WAAW,CAACE,YAAY,CAACI,GAAG,CAAC;EACvD,MAAMC,cAAc,GAAGF,iBAAiB,CAACG,OAAO;EAEhD,MAAM;IACJC,qBAAqB;IACrBC,uBAAuB;IACvBC,2BAA2B;IAC3BC;EACF,CAAC,GAAGL,cAAc;EAElB,OAAOT,KAAK,CAACK,MAAM,CAACU,GAAG,CAAC,CAACC,KAAK,EAAEC,CAAC,KAAK;IACpC,MAAMC,OAAO,GAAGD,CAAC,KAAKjB,KAAK,CAACM,KAAK;IAEjC,MAAMa,OAAO,GAAGA,CAAA,KAAM;MACpB,MAAMC,KAAK,GAAGnB,UAAU,CAACoB,IAAI,CAAC;QAC5BC,IAAI,EAAE,iBAAiB;QACvBC,MAAM,EAAEP,KAAK,CAACR,GAAG;QACjBgB,iBAAiB,EAAE;MACrB,CAAC,CAAC;MAEF,IAAI,CAACJ,KAAK,CAACK,gBAAgB,EAAE;QAC3BxB,UAAU,CAACyB,QAAQ,CAAAC,MAAA,CAAAC,MAAA,KACbV,OAAO,GACPzB,aAAa,CAACoC,WAAW,CAAC,CAAC,GAC3BrC,aAAa,CAACsC,QAAQ,CAACd,KAAK,CAAC;UACjCO,MAAM,EAAEvB,KAAK,CAACQ;QAAA,EACf,CAAC;MACJ;IACF,CAAC;IAED,MAAM;MACJuB,KAAK;MACLC,WAAW;MACXC,UAAU;MACVC,gBAAgB;MAChBC,eAAe;MACfC;IACF,CAAC,GAAGlC,WAAW,CAACc,KAAK,CAACR,GAAG,CAAC,CAACE,OAAO;IAElC,OACEZ,IAAA,CAACF,UAAU;MAEToB,KAAK,EAAEA,KAAM;MACbqB,IAAI,EAAElC,SAAS,CAACa,KAAK,CAACsB,IAAI,EAAEtB,KAAK,CAACuB,MAAM,CAAE;MAC1CC,KAAK,EACHR,WAAW,KAAKS,SAAS,GACrBT,WAAW,GACXD,KAAK,KAAKU,SAAS,GACjBV,KAAK,GACLf,KAAK,CAACsB,IACb;MACDI,IAAI,EAAET,UAAW;MACjBf,OAAO,EAAEA,OAAQ;MACjByB,eAAe,EAAEhC,qBAAsB;MACvCiC,iBAAiB,EAAEhC,uBAAwB;MAC3CiC,qBAAqB,EAAEhC,2BAA4B;MACnDiC,uBAAuB,EAAEhC,6BAA8B;MACvDiC,gBAAgB,EAAEX,sBAAuB;MACzCY,UAAU,EAAEd,gBAAiB;MAC7Be,KAAK,EAAEd,eAAgB;MACvBhB,OAAO,EAAEA;IAAQ,GAnBZH,KAAK,CAACR,GAoBZ,CAAC;EAEN,CAAC,CAAC;AACJ","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}