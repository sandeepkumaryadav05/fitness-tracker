{"ast":null,"code":"\"use strict\";\n\nimport * as React from 'react';\nclass FakeSharedValue {\n  _listeners = new Map();\n  constructor(value) {\n    this._value = value;\n  }\n  addListener(id, listener) {\n    this._listeners.set(id, listener);\n  }\n  removeListener(id) {\n    this._listeners.delete(id);\n  }\n  modify(modifier) {\n    this.value = modifier !== undefined ? modifier(this.value) : this.value;\n  }\n  get() {\n    return this.value;\n  }\n  set(value) {\n    this.value = value;\n  }\n  set value(value) {\n    this._value = value;\n    for (const listener of this._listeners.values()) {\n      listener(value);\n    }\n  }\n  get value() {\n    return this._value;\n  }\n  _isReanimatedSharedValue = true;\n}\nexport function useFakeSharedValue(value) {\n  const sharedValue = React.useRef(null);\n  if (sharedValue.current === null) {\n    sharedValue.current = new FakeSharedValue(value);\n  }\n  return sharedValue.current;\n}","map":{"version":3,"names":["React","FakeSharedValue","_listeners","Map","constructor","value","_value","addListener","id","listener","set","removeListener","delete","modify","modifier","undefined","get","values","_isReanimatedSharedValue","useFakeSharedValue","sharedValue","useRef","current"],"sources":["C:\\Users\\Lenovo\\OneDrive\\Desktop\\fit-get\\fitness-tracker\\node_modules\\react-native-drawer-layout\\src\\utils\\useFakeSharedValue.tsx"],"sourcesContent":["import * as React from 'react';\n\nclass FakeSharedValue {\n  _listeners = new Map<number, (value: number) => void>();\n  _value: number;\n\n  constructor(value: number) {\n    this._value = value;\n  }\n\n  addListener(id: number, listener: (value: number) => void) {\n    this._listeners.set(id, listener);\n  }\n\n  removeListener(id: number) {\n    this._listeners.delete(id);\n  }\n\n  modify(modifier?: (value: number) => number) {\n    this.value = modifier !== undefined ? modifier(this.value) : this.value;\n  }\n\n  get() {\n    return this.value;\n  }\n\n  set(value: number) {\n    this.value = value;\n  }\n\n  set value(value: number) {\n    this._value = value;\n\n    for (const listener of this._listeners.values()) {\n      listener(value);\n    }\n  }\n\n  get value() {\n    return this._value;\n  }\n\n  _isReanimatedSharedValue = true;\n}\n\n/**\n * Compatibility layer for `useDrawerProgress` with `react-native-reanimated`\n */\nexport function useFakeSharedValue(value: number): FakeSharedValue {\n  const sharedValue = React.useRef<FakeSharedValue | null>(null);\n\n  if (sharedValue.current === null) {\n    sharedValue.current = new FakeSharedValue(value);\n  }\n\n  return sharedValue.current;\n}\n"],"mappings":";;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAE9B,MAAMC,eAAe,CAAC;EACpBC,UAAU,GAAG,IAAIC,GAAG,CAAkC,CAAC;EAGvDC,WAAWA,CAACC,KAAa,EAAE;IACzB,IAAI,CAACC,MAAM,GAAGD,KAAK;EACrB;EAEAE,WAAWA,CAACC,EAAU,EAAEC,QAAiC,EAAE;IACzD,IAAI,CAACP,UAAU,CAACQ,GAAG,CAACF,EAAE,EAAEC,QAAQ,CAAC;EACnC;EAEAE,cAAcA,CAACH,EAAU,EAAE;IACzB,IAAI,CAACN,UAAU,CAACU,MAAM,CAACJ,EAAE,CAAC;EAC5B;EAEAK,MAAMA,CAACC,QAAoC,EAAE;IAC3C,IAAI,CAACT,KAAK,GAAGS,QAAQ,KAAKC,SAAS,GAAGD,QAAQ,CAAC,IAAI,CAACT,KAAK,CAAC,GAAG,IAAI,CAACA,KAAK;EACzE;EAEAW,GAAGA,CAAA,EAAG;IACJ,OAAO,IAAI,CAACX,KAAK;EACnB;EAEAK,GAAGA,CAACL,KAAa,EAAE;IACjB,IAAI,CAACA,KAAK,GAAGA,KAAK;EACpB;EAEA,IAAIA,KAAKA,CAACA,KAAa,EAAE;IACvB,IAAI,CAACC,MAAM,GAAGD,KAAK;IAEnB,KAAK,MAAMI,QAAQ,IAAI,IAAI,CAACP,UAAU,CAACe,MAAM,CAAC,CAAC,EAAE;MAC/CR,QAAQ,CAACJ,KAAK,CAAC;IACjB;EACF;EAEA,IAAIA,KAAKA,CAAA,EAAG;IACV,OAAO,IAAI,CAACC,MAAM;EACpB;EAEAY,wBAAwB,GAAG,IAAI;AACjC;AAKA,OAAO,SAASC,kBAAkBA,CAACd,KAAa,EAAmB;EACjE,MAAMe,WAAW,GAAGpB,KAAK,CAACqB,MAAM,CAAyB,IAAI,CAAC;EAE9D,IAAID,WAAW,CAACE,OAAO,KAAK,IAAI,EAAE;IAChCF,WAAW,CAACE,OAAO,GAAG,IAAIrB,eAAe,CAACI,KAAK,CAAC;EAClD;EAEA,OAAOe,WAAW,CAACE,OAAO;AAC5B","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}