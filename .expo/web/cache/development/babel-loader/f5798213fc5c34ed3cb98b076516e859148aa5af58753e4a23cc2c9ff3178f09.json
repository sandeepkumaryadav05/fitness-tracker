{"ast":null,"code":"\"use strict\";\n\nexport function goBack() {\n  return {\n    type: 'GO_BACK'\n  };\n}\nexport function navigate(...args) {\n  if (typeof args[0] === 'string') {\n    const [name, params, options] = args;\n    if (typeof options === 'boolean') {\n      console.warn(`Passing a boolean as the third argument to 'navigate' is deprecated. Pass '{ merge: true }' instead.`);\n    }\n    return {\n      type: 'NAVIGATE',\n      payload: {\n        name,\n        params,\n        merge: typeof options === 'boolean' ? options : options?.merge,\n        pop: options?.pop\n      }\n    };\n  } else {\n    const payload = args[0] || {};\n    if (!('name' in payload)) {\n      throw new Error('You need to specify a name when calling navigate with an object as the argument. See https://reactnavigation.org/docs/navigation-actions#navigate for usage.');\n    }\n    return {\n      type: 'NAVIGATE',\n      payload\n    };\n  }\n}\nexport function navigateDeprecated(...args) {\n  if (typeof args[0] === 'string') {\n    return {\n      type: 'NAVIGATE_DEPRECATED',\n      payload: {\n        name: args[0],\n        params: args[1]\n      }\n    };\n  } else {\n    const payload = args[0] || {};\n    if (!('name' in payload)) {\n      throw new Error('You need to specify a name when calling navigateDeprecated with an object as the argument. See https://reactnavigation.org/docs/navigation-actions#navigatelegacy for usage.');\n    }\n    return {\n      type: 'NAVIGATE_DEPRECATED',\n      payload\n    };\n  }\n}\nexport function reset(state) {\n  return {\n    type: 'RESET',\n    payload: state\n  };\n}\nexport function setParams(params) {\n  return {\n    type: 'SET_PARAMS',\n    payload: {\n      params\n    }\n  };\n}\nexport function replaceParams(params) {\n  return {\n    type: 'REPLACE_PARAMS',\n    payload: {\n      params\n    }\n  };\n}\nexport function preload(name, params) {\n  return {\n    type: 'PRELOAD',\n    payload: {\n      name,\n      params\n    }\n  };\n}","map":{"version":3,"names":["goBack","type","navigate","args","name","params","options","console","warn","payload","merge","pop","Error","navigateDeprecated","reset","state","setParams","replaceParams","preload"],"sources":["C:\\Users\\Lenovo\\OneDrive\\Desktop\\fit-get\\fitness-tracker\\node_modules\\@react-navigation\\routers\\src\\CommonActions.tsx"],"sourcesContent":["import type { NavigationState, PartialState, Route } from './types';\n\ntype ResetState =\n  | PartialState<NavigationState>\n  | NavigationState\n  | (Omit<NavigationState, 'routes'> & {\n      routes: Omit<Route<string>, 'key'>[];\n    });\n\ntype GoBackAction = {\n  type: 'GO_BACK';\n  source?: string;\n  target?: string;\n};\n\ntype NavigateAction = {\n  type: 'NAVIGATE';\n  payload: {\n    name: string;\n    params?: object;\n    path?: string;\n    merge?: boolean;\n    pop?: boolean;\n  };\n  source?: string;\n  target?: string;\n};\n\ntype NavigateDeprecatedAction = {\n  type: 'NAVIGATE_DEPRECATED';\n  payload: {\n    name: string;\n    params?: object;\n    merge?: boolean;\n  };\n  source?: string;\n  target?: string;\n};\n\ntype ResetAction = {\n  type: 'RESET';\n  payload: ResetState | undefined;\n  source?: string;\n  target?: string;\n};\n\ntype SetParamsAction = {\n  type: 'SET_PARAMS';\n  payload: { params?: object };\n  source?: string;\n  target?: string;\n};\n\ntype ReplaceParamsAction = {\n  type: 'REPLACE_PARAMS';\n  payload: { params?: object };\n  source?: string;\n  target?: string;\n};\n\ntype PreloadAction = {\n  type: 'PRELOAD';\n  payload: {\n    name: string;\n    params?: object;\n  };\n  source?: string;\n  target?: string;\n};\n\nexport type Action =\n  | GoBackAction\n  | NavigateAction\n  | NavigateDeprecatedAction\n  | ResetAction\n  | SetParamsAction\n  | ReplaceParamsAction\n  | PreloadAction;\n\nexport function goBack(): Action {\n  return { type: 'GO_BACK' };\n}\n\nexport function navigate(\n  name: string,\n  params?: object,\n  options?: {\n    merge?: boolean;\n    pop?: boolean;\n  }\n): Action;\n\nexport function navigate(options: {\n  name: string;\n  params?: object;\n  path?: string;\n  merge?: boolean;\n  pop?: boolean;\n}): Action;\n\nexport function navigate(...args: any): Action {\n  if (typeof args[0] === 'string') {\n    const [name, params, options] = args;\n\n    if (typeof options === 'boolean') {\n      console.warn(\n        `Passing a boolean as the third argument to 'navigate' is deprecated. Pass '{ merge: true }' instead.`\n      );\n    }\n\n    return {\n      type: 'NAVIGATE',\n      payload: {\n        name,\n        params,\n        merge: typeof options === 'boolean' ? options : options?.merge,\n        pop: options?.pop,\n      },\n    };\n  } else {\n    const payload = args[0] || {};\n\n    if (!('name' in payload)) {\n      throw new Error(\n        'You need to specify a name when calling navigate with an object as the argument. See https://reactnavigation.org/docs/navigation-actions#navigate for usage.'\n      );\n    }\n\n    return { type: 'NAVIGATE', payload };\n  }\n}\n\nexport function navigateDeprecated(\n  ...args:\n    | [name: string]\n    | [name: string, params: object | undefined]\n    | [options: { name: string; params?: object }]\n): Action {\n  if (typeof args[0] === 'string') {\n    return {\n      type: 'NAVIGATE_DEPRECATED',\n      payload: { name: args[0], params: args[1] },\n    };\n  } else {\n    const payload = args[0] || {};\n\n    if (!('name' in payload)) {\n      throw new Error(\n        'You need to specify a name when calling navigateDeprecated with an object as the argument. See https://reactnavigation.org/docs/navigation-actions#navigatelegacy for usage.'\n      );\n    }\n\n    return { type: 'NAVIGATE_DEPRECATED', payload };\n  }\n}\n\nexport function reset(state: ResetState | undefined) {\n  return { type: 'RESET', payload: state } as const satisfies ResetAction;\n}\n\nexport function setParams(params: object) {\n  return {\n    type: 'SET_PARAMS',\n    payload: { params },\n  } as const satisfies SetParamsAction;\n}\n\nexport function replaceParams(params: object) {\n  return {\n    type: 'REPLACE_PARAMS',\n    payload: { params },\n  } as const satisfies ReplaceParamsAction;\n}\n\nexport function preload(name: string, params?: object) {\n  return {\n    type: 'PRELOAD',\n    payload: { name, params },\n  } as const satisfies PreloadAction;\n}\n"],"mappings":";;AA+EA,OAAO,SAASA,MAAMA,CAAA,EAAW;EAC/B,OAAO;IAAEC,IAAI,EAAE;EAAU,CAAC;AAC5B;AAmBA,OAAO,SAASC,QAAQA,CAAC,GAAGC,IAAS,EAAU;EAC7C,IAAI,OAAOA,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;IAC/B,MAAM,CAACC,IAAI,EAAEC,MAAM,EAAEC,OAAO,CAAC,GAAGH,IAAI;IAEpC,IAAI,OAAOG,OAAO,KAAK,SAAS,EAAE;MAChCC,OAAO,CAACC,IAAI,CACV,sGACF,CAAC;IACH;IAEA,OAAO;MACLP,IAAI,EAAE,UAAU;MAChBQ,OAAO,EAAE;QACPL,IAAI;QACJC,MAAM;QACNK,KAAK,EAAE,OAAOJ,OAAO,KAAK,SAAS,GAAGA,OAAO,GAAGA,OAAO,EAAEI,KAAK;QAC9DC,GAAG,EAAEL,OAAO,EAAEK;MAChB;IACF,CAAC;EACH,CAAC,MAAM;IACL,MAAMF,OAAO,GAAGN,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAE7B,IAAI,EAAE,MAAM,IAAIM,OAAO,CAAC,EAAE;MACxB,MAAM,IAAIG,KAAK,CACb,8JACF,CAAC;IACH;IAEA,OAAO;MAAEX,IAAI,EAAE,UAAU;MAAEQ;IAAQ,CAAC;EACtC;AACF;AAEA,OAAO,SAASI,kBAAkBA,CAChC,GAAGV,IAG6C,EACxC;EACR,IAAI,OAAOA,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;IAC/B,OAAO;MACLF,IAAI,EAAE,qBAAqB;MAC3BQ,OAAO,EAAE;QAAEL,IAAI,EAAED,IAAI,CAAC,CAAC,CAAC;QAAEE,MAAM,EAAEF,IAAI,CAAC,CAAC;MAAE;IAC5C,CAAC;EACH,CAAC,MAAM;IACL,MAAMM,OAAO,GAAGN,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;IAE7B,IAAI,EAAE,MAAM,IAAIM,OAAO,CAAC,EAAE;MACxB,MAAM,IAAIG,KAAK,CACb,8KACF,CAAC;IACH;IAEA,OAAO;MAAEX,IAAI,EAAE,qBAAqB;MAAEQ;IAAQ,CAAC;EACjD;AACF;AAEA,OAAO,SAASK,KAAKA,CAACC,KAA6B,EAAE;EACnD,OAAO;IAAEd,IAAI,EAAE,OAAO;IAAEQ,OAAO,EAAEM;EAAM,CAAC;AAC1C;AAEA,OAAO,SAASC,SAASA,CAACX,MAAc,EAAE;EACxC,OAAO;IACLJ,IAAI,EAAE,YAAY;IAClBQ,OAAO,EAAE;MAAEJ;IAAO;EACpB,CAAC;AACH;AAEA,OAAO,SAASY,aAAaA,CAACZ,MAAc,EAAE;EAC5C,OAAO;IACLJ,IAAI,EAAE,gBAAgB;IACtBQ,OAAO,EAAE;MAAEJ;IAAO;EACpB,CAAC;AACH;AAEA,OAAO,SAASa,OAAOA,CAACd,IAAY,EAAEC,MAAe,EAAE;EACrD,OAAO;IACLJ,IAAI,EAAE,SAAS;IACfQ,OAAO,EAAE;MAAEL,IAAI;MAAEC;IAAO;EAC1B,CAAC;AACH","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}