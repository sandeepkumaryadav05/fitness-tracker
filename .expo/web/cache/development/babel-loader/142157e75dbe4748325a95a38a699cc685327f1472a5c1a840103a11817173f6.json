{"ast":null,"code":"\"use strict\";\n\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/with-selector';\nimport { useClientLayoutEffect } from \"./useClientLayoutEffect.js\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function useNavigationState(selector) {\n  const stateListener = React.useContext(NavigationStateListenerContext);\n  if (stateListener == null) {\n    throw new Error(\"Couldn't get the navigation state. Is your component inside a navigator?\");\n  }\n  const value = useSyncExternalStoreWithSelector(stateListener.subscribe, stateListener.getState, stateListener.getState, selector);\n  return value;\n}\nexport function NavigationStateListenerProvider({\n  state,\n  children\n}) {\n  const listeners = React.useRef([]);\n  const getState = useLatestCallback(() => state);\n  const subscribe = useLatestCallback(callback => {\n    listeners.current.push(callback);\n    return () => {\n      listeners.current = listeners.current.filter(cb => cb !== callback);\n    };\n  });\n  useClientLayoutEffect(() => {\n    listeners.current.forEach(callback => callback());\n  }, [state]);\n  const context = React.useMemo(() => ({\n    getState,\n    subscribe\n  }), [getState, subscribe]);\n  return _jsx(NavigationStateListenerContext.Provider, {\n    value: context,\n    children: children\n  });\n}\nconst NavigationStateListenerContext = React.createContext(undefined);","map":{"version":3,"names":["React","useLatestCallback","useSyncExternalStoreWithSelector","useClientLayoutEffect","jsx","_jsx","useNavigationState","selector","stateListener","useContext","NavigationStateListenerContext","Error","value","subscribe","getState","NavigationStateListenerProvider","state","children","listeners","useRef","callback","current","push","filter","cb","forEach","context","useMemo","Provider","createContext","undefined"],"sources":["C:\\Users\\Lenovo\\OneDrive\\Desktop\\fit-get\\fitness-tracker\\node_modules\\@react-navigation\\core\\src\\useNavigationState.tsx"],"sourcesContent":["import type { NavigationState, ParamListBase } from '@react-navigation/routers';\nimport * as React from 'react';\nimport useLatestCallback from 'use-latest-callback';\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/with-selector';\n\nimport { useClientLayoutEffect } from './useClientLayoutEffect';\n\ntype Selector<ParamList extends ParamListBase, T> = (\n  state: NavigationState<ParamList>\n) => T;\n\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport function useNavigationState<ParamList extends ParamListBase, T>(\n  selector: Selector<ParamList, T>\n): T {\n  const stateListener = React.useContext(NavigationStateListenerContext);\n\n  if (stateListener == null) {\n    throw new Error(\n      \"Couldn't get the navigation state. Is your component inside a navigator?\"\n    );\n  }\n\n  const value = useSyncExternalStoreWithSelector(\n    stateListener.subscribe,\n    // @ts-expect-error: this is unsafe, but needed to make the generic work\n    stateListener.getState,\n    stateListener.getState,\n    selector\n  );\n\n  return value;\n}\n\nexport function NavigationStateListenerProvider({\n  state,\n  children,\n}: {\n  state: NavigationState<ParamListBase>;\n  children: React.ReactNode;\n}) {\n  const listeners = React.useRef<(() => void)[]>([]);\n\n  const getState = useLatestCallback(() => state);\n\n  const subscribe = useLatestCallback((callback: () => void) => {\n    listeners.current.push(callback);\n\n    return () => {\n      listeners.current = listeners.current.filter((cb) => cb !== callback);\n    };\n  });\n\n  useClientLayoutEffect(() => {\n    listeners.current.forEach((callback) => callback());\n  }, [state]);\n\n  const context = React.useMemo(\n    () => ({\n      getState,\n      subscribe,\n    }),\n    [getState, subscribe]\n  );\n\n  return (\n    <NavigationStateListenerContext.Provider value={context}>\n      {children}\n    </NavigationStateListenerContext.Provider>\n  );\n}\n\nconst NavigationStateListenerContext = React.createContext<\n  | {\n      getState: () => NavigationState<ParamListBase>;\n      subscribe: (callback: () => void) => () => void;\n    }\n  | undefined\n>(undefined);\n"],"mappings":";;AACA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,SAASC,gCAAgC,QAAQ,uCAAuC;AAExF,SAASC,qBAAqB,QAAQ,4BAAyB;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAWhE,OAAO,SAASC,kBAAkBA,CAChCC,QAAgC,EAC7B;EACH,MAAMC,aAAa,GAAGR,KAAK,CAACS,UAAU,CAACC,8BAA8B,CAAC;EAEtE,IAAIF,aAAa,IAAI,IAAI,EAAE;IACzB,MAAM,IAAIG,KAAK,CACb,0EACF,CAAC;EACH;EAEA,MAAMC,KAAK,GAAGV,gCAAgC,CAC5CM,aAAa,CAACK,SAAS,EAEvBL,aAAa,CAACM,QAAQ,EACtBN,aAAa,CAACM,QAAQ,EACtBP,QACF,CAAC;EAED,OAAOK,KAAK;AACd;AAEA,OAAO,SAASG,+BAA+BA,CAAC;EAC9CC,KAAK;EACLC;AAIF,CAAC,EAAE;EACD,MAAMC,SAAS,GAAGlB,KAAK,CAACmB,MAAM,CAAiB,EAAE,CAAC;EAElD,MAAML,QAAQ,GAAGb,iBAAiB,CAAC,MAAMe,KAAK,CAAC;EAE/C,MAAMH,SAAS,GAAGZ,iBAAiB,CAAEmB,QAAoB,IAAK;IAC5DF,SAAS,CAACG,OAAO,CAACC,IAAI,CAACF,QAAQ,CAAC;IAEhC,OAAO,MAAM;MACXF,SAAS,CAACG,OAAO,GAAGH,SAAS,CAACG,OAAO,CAACE,MAAM,CAAEC,EAAE,IAAKA,EAAE,KAAKJ,QAAQ,CAAC;IACvE,CAAC;EACH,CAAC,CAAC;EAEFjB,qBAAqB,CAAC,MAAM;IAC1Be,SAAS,CAACG,OAAO,CAACI,OAAO,CAAEL,QAAQ,IAAKA,QAAQ,CAAC,CAAC,CAAC;EACrD,CAAC,EAAE,CAACJ,KAAK,CAAC,CAAC;EAEX,MAAMU,OAAO,GAAG1B,KAAK,CAAC2B,OAAO,CAC3B,OAAO;IACLb,QAAQ;IACRD;EACF,CAAC,CAAC,EACF,CAACC,QAAQ,EAAED,SAAS,CACtB,CAAC;EAED,OACER,IAAA,CAACK,8BAA8B,CAACkB,QAAQ;IAAChB,KAAK,EAAEc,OAAQ;IAAAT,QAAA,EACrDA;EAAQ,CAC8B,CAAC;AAE9C;AAEA,MAAMP,8BAA8B,GAAGV,KAAK,CAAC6B,aAAa,CAMxDC,SAAS,CAAC","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}