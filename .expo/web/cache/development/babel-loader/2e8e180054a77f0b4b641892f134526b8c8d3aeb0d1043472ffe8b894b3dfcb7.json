{"ast":null,"code":"\"use strict\";\n\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nconst _excluded = [\"href\", \"icon\", \"label\", \"labelStyle\", \"focused\", \"allowFontScaling\", \"activeTintColor\", \"inactiveTintColor\", \"activeBackgroundColor\", \"inactiveBackgroundColor\", \"style\", \"onPress\", \"pressColor\", \"pressOpacity\", \"testID\", \"accessibilityLabel\"];\nimport { PlatformPressable, Text } from '@react-navigation/elements';\nimport { useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nexport function DrawerItem(props) {\n  const {\n    colors,\n    fonts\n  } = useTheme();\n  const {\n      href,\n      icon,\n      label,\n      labelStyle,\n      focused = false,\n      allowFontScaling,\n      activeTintColor = colors.primary,\n      inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n      activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n      inactiveBackgroundColor = 'transparent',\n      style,\n      onPress,\n      pressColor,\n      pressOpacity = 1,\n      testID,\n      accessibilityLabel\n    } = props,\n    rest = _objectWithoutPropertiesLoose(props, _excluded);\n  const {\n    borderRadius = 56\n  } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  const iconNode = icon ? icon({\n    size: 24,\n    focused,\n    color\n  }) : null;\n  return _jsx(View, Object.assign({\n    collapsable: false\n  }, rest, {\n    style: [styles.container, {\n      borderRadius,\n      backgroundColor\n    }, style],\n    children: _jsx(PlatformPressable, {\n      testID: testID,\n      onPress: onPress,\n      role: \"button\",\n      \"aria-label\": accessibilityLabel,\n      \"aria-selected\": focused,\n      pressColor: pressColor,\n      pressOpacity: pressOpacity,\n      hoverEffect: {\n        color\n      },\n      href: href,\n      children: _jsxs(View, {\n        style: [styles.wrapper, {\n          borderRadius\n        }],\n        children: [iconNode, _jsx(View, {\n          style: [styles.label, {\n            marginStart: iconNode ? 12 : 0\n          }],\n          children: typeof label === 'string' ? _jsx(Text, {\n            numberOfLines: 1,\n            allowFontScaling: allowFontScaling,\n            style: [styles.labelText, {\n              color\n            }, fonts.medium, labelStyle],\n            children: label\n          }) : label({\n            color,\n            focused\n          })\n        })]\n      })\n    })\n  }));\n}\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden'\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 11,\n    paddingStart: 16,\n    paddingEnd: 24\n  },\n  label: {\n    marginEnd: 12,\n    marginVertical: 4,\n    flex: 1\n  },\n  labelText: {\n    lineHeight: 24,\n    textAlignVertical: 'center'\n  }\n});","map":{"version":3,"names":["PlatformPressable","Text","useTheme","Color","React","StyleSheet","View","jsx","_jsx","jsxs","_jsxs","DrawerItem","props","colors","fonts","href","icon","label","labelStyle","focused","allowFontScaling","activeTintColor","primary","inactiveTintColor","text","alpha","rgb","string","activeBackgroundColor","inactiveBackgroundColor","style","onPress","pressColor","pressOpacity","testID","accessibilityLabel","rest","_objectWithoutPropertiesLoose","_excluded","borderRadius","flatten","color","backgroundColor","iconNode","size","Object","assign","collapsable","styles","container","children","role","hoverEffect","wrapper","marginStart","numberOfLines","labelText","medium","create","overflow","flexDirection","alignItems","paddingVertical","paddingStart","paddingEnd","marginEnd","marginVertical","flex","lineHeight","textAlignVertical"],"sources":["C:\\Users\\Lenovo\\OneDrive\\Desktop\\fit-get\\fitness-tracker\\node_modules\\@react-navigation\\drawer\\src\\views\\DrawerItem.tsx"],"sourcesContent":["import { PlatformPressable, Text } from '@react-navigation/elements';\nimport { type Route, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport * as React from 'react';\nimport {\n  type StyleProp,\n  StyleSheet,\n  type TextStyle,\n  View,\n  type ViewStyle,\n} from 'react-native';\n\ntype Props = {\n  /**\n   * The route object which should be specified by the drawer item.\n   */\n  route?: Route<string>;\n  /**\n   * The `href` to use for the anchor tag on web\n   */\n  href?: string;\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Color of the touchable effect on press.\n   * Only supported on Android.\n   *\n   * @platform android\n   */\n  pressColor?: string;\n  /**\n   * Opacity of the touchable effect on press.\n   * Only supported on iOS.\n   *\n   * @platform ios\n   */\n  pressOpacity?: number;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n  /**\n   * Whether label font should scale to respect Text Size accessibility settings.\n   */\n  allowFontScaling?: boolean;\n\n  /**\n   * Accessibility label for drawer item.\n   */\n  accessibilityLabel?: string;\n  /**\n   * ID to locate this drawer item in tests.\n   */\n  testID?: string;\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport function DrawerItem(props: Props) {\n  const { colors, fonts } = useTheme();\n\n  const {\n    href,\n    icon,\n    label,\n    labelStyle,\n    focused = false,\n    allowFontScaling,\n    activeTintColor = colors.primary,\n    // eslint-disable-next-line @eslint-react/no-unstable-default-props\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    // eslint-disable-next-line @eslint-react/no-unstable-default-props\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    pressColor,\n    pressOpacity = 1,\n    testID,\n    accessibilityLabel,\n    ...rest\n  } = props;\n\n  const { borderRadius = 56 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <PlatformPressable\n        testID={testID}\n        onPress={onPress}\n        role=\"button\"\n        aria-label={accessibilityLabel}\n        aria-selected={focused}\n        pressColor={pressColor}\n        pressOpacity={pressOpacity}\n        hoverEffect={{ color }}\n        href={href}\n      >\n        <View style={[styles.wrapper, { borderRadius }]}>\n          {iconNode}\n          <View style={[styles.label, { marginStart: iconNode ? 12 : 0 }]}>\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                allowFontScaling={allowFontScaling}\n                style={[styles.labelText, { color }, fonts.medium, labelStyle]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </View>\n      </PlatformPressable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 11,\n    paddingStart: 16,\n    paddingEnd: 24,\n  },\n  label: {\n    marginEnd: 12,\n    marginVertical: 4,\n    flex: 1,\n  },\n  labelText: {\n    lineHeight: 24,\n    textAlignVertical: 'center',\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}